#settings.py
# ************************************ ADDED_CODE_START **************************************
# INSTALLED_APPS = [
#     'jazzmin',
#     'appName',
#     ]

AUTH_USER_MODEL = "WhatsappApp.MyUser"     # Add User Model Here.

DEBUG = True

# For Production Use : If Model Admin is chanaged then it is in False.
# DEBUG = False

# ALLOWED_HOSTS = [] #Default.
ALLOWED_HOSTS = ['*']

# ------------------- MEDIA AND STATIC FILES STARTS -----------------
import os # Put this in Top of the page.
STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles/')

MEDIA_ROOT = os.path.join(BASE_DIR, "Media")
MEDIA_URL = "/Media/"
# ------------------- MEDIA AND STATIC FILES ENDS --------------------


# ----------------- Email Settings Starts -------------------------
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'abhilogy151@gmail.com'
EMAIL_HOST_PASSWORD = 'mgbk cdsz loza yhbx'

# """To Send Email Don't Use Password Create App Password
#     [ URL: https://myaccount.google.com/apppasswords ]
#     Name App Password and paste it here.
# """
# ----------------- Email Settings Ends -------------------------


# ------------------ Google Recaptcha Starts --------------------
""" Process : 
    Step1:- Go to google recaptcha. www.google.com..
    Step2:- v3
    Step3:- settings icon
    Step4:- Add label/Change label
    Step5:- Add IP address only not url.
"""
SITE_KEY = '6LeYX9kpAAAAAKyrJ_LDIsh6GbaDMyol6luib8v9'
SECRET_KEY = '6LeYX9kpAAAAANzL9KJWyaPmH4e98HJmyV4l3akL'
# ------------------ Google Recaptcha Ends --------------------

# ************************************ ADDED_CODE_END **************************************






# Proj/urls.py
# ************************************ ADDED_CODE_START **************************************
from django.contrib import admin
from django.urls import include, path
from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include("WhatsappApp.urls")),

]

if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL,
                          document_root=settings.MEDIA_ROOT)
# ************************************ ADDED_CODE_END **************************************








# App/urls.py
# ************************************ ADDED_CODE_START **************************************
from django.urls import path
from django.conf import settings
from django.conf.urls.static import static
from . import views

urlpatterns = [
    path('send-email/', views.send_email, name="send_email"),

    path('', views.sign_in, name="sign_in"),
    path('sign_out/', views.sign_out, name="sign_out"),
    path('dashboard/', views.dashboard, name="dashboard"),
    path('create_contact/', views.create_contact, name="create_contact"),
    path('delete_contact/<int:id>/', views.delete_contact),
    path('edit_contact/<int:id>/', views.edit_contact),

] + static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)
# ************************************ ADDED_CODE_END **************************************







# App/views.py
# ************************************ ADDED_CODE_START **************************************
from django.shortcuts import render, redirect
from django.http import HttpResponse
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.decorators import login_required
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
from django.core.mail import send_mail
from django.conf import settings

from .models import *
from .filters import *

from django.contrib import messages
# messages.info(request, "Three credits remain in your account.")
# messages.success(request, "Profile details updated.")
# messages.warning(request, "Your account expires in three days.")
# messages.error(request, "Document deleted.")


# ------------------------------- External Libraries -----------------------------
from .whatsapp_api import *
import requests
from datetime import datetime
import pandas as pd

# Loging messages
import logging
logging.basicConfig(level=logging.DEBUG)
# logging.debug('This is a debug message')
# logging.info('This is an info message')
# logging.warning('This is a warning message')
# logging.error('This is an error message')
# logging.critical('This is a critical message')
# ------------------------------- External Libraries -------------------------------#
from .utils import get_excel_data, store_report_as_excel


# Create your views here.
def sign_in(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')

        user = authenticate(username=username, password=password)

        if user is not None:
            # Recapcha authentication.
            site_key = request.POST['g-recaptcha-response']
            capchaData = {
                'secret': settings.SECRET_KEY,
                'response': site_key
            }

            post_url = 'https://www.google.com/recaptcha/api/siteverify'
            res = requests.post(post_url, data=capchaData)
            verify = res.json()['success']

            if verify:
                login(request, user)
                return redirect(request.GET.get('next', "dashboard"))

            else:
                messages.error(request, 'Invalid Captcha Please Try Again')
        else:
            messages.error(request, "Wrong Credentials")

    return render(request, 'login.html', {'site_key': settings.SITE_KEY})


def sign_out(request):
    logout(request)
    return redirect('sign_in')


# ------------ Admin Dashboard Starts -------------
@login_required(login_url="/")
def dashboard(request):
    database = Database.objects.filter(user=request.user)
    campaign = Campaign.objects.filter(user=request.user)
    template = Template.objects.filter(user=request.user)

    db_count = database.count()
    camp_count = campaign.count()
    temp_count = template.count()

    contexts = {'db_count': db_count,
                'camp_count': camp_count, 'temp_count': temp_count}

    return render(request, 'dashboard.html', contexts)
# ------------ Admin Dashboard Ends -------------


# ------------ Upload Data Starts ------------------
@login_required(login_url="/")
def create_contact(request):
    database = Database.objects.filter(user=request.user).order_by('id')

    """
        if template:
            last_id = database.last().template_id
            last_id = int(last_id.split('-')[-1])
        else:
            last_id = 0

        temp_id = f"TEMP-{last_id+1:04d}"
    """
    
    excel = DemoExcelFile.objects.all()[0]
    file = excel.file
    file_path = '/Media/'+str(file)

    db_filter = DatabaseFilter(request.GET, queryset=database)

    # Pagination.
    page = request.GET.get('page')
    paginator = Paginator(db_filter.qs, 2)

    try:
        page_items = paginator.page(page)
    except PageNotAnInteger:
        page_items = paginator.page(1)
    except EmptyPage:
        page_items = paginator.page(paginator.num_pages)

    contexts = {'filter': db_filter, 'page_items': page_items, 'file_path': file_path}

    if request.method == 'POST':
        db_name = request.POST.get('db_name')
        db_file = request.FILES.get('db_file')

        current_date = datetime.now().date()

        data_file_format = str(db_file).split('.')[-1]

        try:
            if data_file_format == 'xlsx':
                strn_data, data_records = get_excel_data(db_file)

            # elif data_file_format == 'vcf':
            #     pass
            else:
                return HttpResponse('Un Supported File Type Is Given.')
        except Exception as e:
            return HttpResponse(f"Exception while reading Excel or VCF {e}")

        Database.objects.create(user=request.user, db_name=db_name, db_data=strn_data,
                                db_records=data_records, creation_date=current_date)

        return redirect('create_contact')
    return render(request, 'contact.html', contexts)


@login_required(login_url="/")
def delete_contact(request, id):
    db = Database.objects.get(id=id)
    db.delete()
    return redirect('create_contact')


@login_required(login_url="/")
def edit_contact(request, id):
    db = Database.objects.get(id=id)
    if request.method == 'POST':
        db_name = request.POST.get('db_name')
        db_file = request.FILES.get('db_file')

        if db_file:
            strn_data, data_records = get_excel_data(db_file)
            db.db_data = strn_data
            db.db_records = data_records

        current_date = datetime.now().date()
        db.db_name = db_name
        db.creation_date = current_date
        db.save()
        return redirect('create_contact')

    return HttpResponse('Edit Data')
# ------------ Upload Data Ends ----------------------



# ------------------------- Send Email Functionality Start ------------------------.
def send_email(request):
    if request.method == 'POST':
        email = request.POST.get('email')
        email_body = request.POST.get('email_body')

        subject = 'Subject : To test email functionality.'

        res = send_mail(subject, email_body, settings.EMAIL_HOST_USER, [email])

        return HttpResponse(f'Email Sent : {res}')
        # return HttpResponse(f'Email Sent : {email}-{email_body}')
    return render(request, 'send_email.html')
# ------------------------- Send Email Functionality End ------------------------.
# ************************************ ADDED_CODE_END **************************************








# App/models.py
# ************************************ ADDED_CODE_START **************************************
from django.db import models
from django.contrib.auth.models import AbstractUser
from django.db.models.signals import post_save


class MyUser(AbstractUser):

    # username = models.CharField(max_length=100)
    email = models.EmailField(unique=True)

    # USERNAME_FIELD = 'email'
    # REQUIRED_FIELDS = ['username']

    # def __str__(self):
    #     return self.username
    

"""
    class MyUser(AbstractUser):

    GENDER_CHOICES = (
        ('Male', 'Male'),
        ('Female', 'Female'),
        ('Other', 'Other'),
    )

    # username, email, password
    gender = models.CharField(
        choices=GENDER_CHOICES, default=GENDER_CHOICES[0], max_length=10, blank=True, null=True)

    def __str__(self):
        return self.username
"""
    


class Profile(models.Model):
    user = models.OneToOneField(
        MyUser, on_delete=models.CASCADE, null=True, blank=True)
    full_name = models.CharField(max_length=100, null=True, blank=True)
    # mobile = models.IntegerField(null=True, blank=True)
    # image = models.ImageField(upload_to='profile_image', null=True, blank=True)
    verified = models.BooleanField(default=False, null=True, blank=True)

    def __str__(self):
        return self.full_name


def create_user_profile(sender, instance, created, *args, **kwargs):
    if created:
        Profile.objects.create(user=instance)


def save_user_profile(sender, instance, *args, **kwargs):
    instance.profile.save()

# post_save.connect(create_user_profile, sender=MyUser)
# post_save.connect(save_user_profile, sender=MyUser)



class DemoExcelFile(models.Model):
    file = models.FileField(upload_to='Excels/', default=None, blank=True, null=True)


class Database(models.Model):
    user = models.ForeignKey(MyUser, on_delete=models.CASCADE, default=None, blank=True, null=True)
    db_name = models.CharField(max_length=50, blank=True, null=True)
    creation_date = models.DateField(default=None, blank=True, null=True)
    db_data = models.CharField(max_length=5000000, blank=True, null=True)
    db_records = models.IntegerField(default=0, blank=True, null=True)

    def __str__(self):
        return self.db_name


class Template(models.Model):
    user = models.ForeignKey(MyUser, on_delete=models.CASCADE, default=None, blank=True, null=True)
    template_name = models.CharField(max_length=50, blank=True, null=True)
    template_id = models.CharField(max_length=50, blank=True, null=True)
    template_body = models.CharField(max_length=500, blank=True, null=True)
    creation_date = models.DateField(default=None, blank=True, null=True)
    file = models.FileField(
        upload_to='Files/', default=None, blank=True, null=True)

    def __str__(self):
        return self.template_name
# ************************************ ADDED_CODE_END **************************************









# App/admin.py
# ************************************ ADDED_CODE_START **************************************
from django.contrib import admin
# from django.contrib.auth.admin import UserAdmin
from .models import MyUser, Profile


class UserAdmin(admin.ModelAdmin):

    list_display = ['username', 'email']  # , 'role'


class ProfileAdmin(admin.ModelAdmin):
    list_editable = ['verified']
    list_display = ['user', 'full_name', 'verified']


admin.site.register(MyUser, UserAdmin)
admin.site.register(Profile, ProfileAdmin)
# ************************************ ADDED_CODE_END **************************************







# App/filters.py
# ************************************ ADDED_CODE_START **************************************
import django_filters
from .models import *
from django.forms.widgets import DateInput


class DatabaseFilter(django_filters.FilterSet):
    date__gte = django_filters.DateFilter(widget=DateInput(
        attrs={'type': 'date'}), field_name='creation_date', lookup_expr='gte')
    date__lte = django_filters.DateFilter(widget=DateInput(
        attrs={'type': 'date'}), field_name='creation_date', lookup_expr='lte')


    # db_name = django_filters.CharFilter(lookup_expr='icontains')
    db_name = django_filters.ModelChoiceFilter(label='db_name', queryset=Database.objects.all(), empty_label='Select Contact')

    class Meta:
        model = Database
        fields = ['creation_date', 'db_name']


class TemplateFilter(django_filters.FilterSet):
    date__gte = django_filters.DateFilter(widget=DateInput(
        attrs={'type': 'date'}), field_name='creation_date', lookup_expr='gte')
    date__lte = django_filters.DateFilter(widget=DateInput(
        attrs={'type': 'date'}), field_name='creation_date', lookup_expr='lte')

    # template_name = django_filters.CharFilter(lookup_expr='icontains', label='Template Name')
    template_name = django_filters.ModelChoiceFilter(
        label='template_name', queryset=Template.objects.all(), empty_label='Select Template')

    template_id = django_filters.CharFilter(
        lookup_expr='icontains', label='Template ID')

    class Meta:
        model = Template
        fields = ['creation_date', 'template_name', 'template_id']


class CampaignFilter(django_filters.FilterSet):
    date__gte = django_filters.DateFilter(widget=DateInput(
        attrs={'type': 'date'}), field_name='creation_date', lookup_expr='gte')
    date__lte = django_filters.DateFilter(widget=DateInput(
        attrs={'type': 'date'}), field_name='creation_date', lookup_expr='lte')

    campaign_name = django_filters.CharFilter(lookup_expr='icontains')

    camp_db = django_filters.ModelChoiceFilter(
        label='camp_db', queryset=Database.objects.all(), empty_label='Select Database')

    camp_template = django_filters.ModelChoiceFilter(queryset=Template.objects.all(),
                                                     empty_label='Select Template')

    class Meta:
        model = Campaign
        fields = ['campaign_name', 'creation_date', 'camp_db', 'camp_template']

# ************************************ ADDED_CODE_END **************************************